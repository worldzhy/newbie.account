// ! ------------------------------------------------------------ //
// !                [Microservice] Account models                 //
// ! ------------------------------------------------------------ //
// * Organization                                                 //
// * User                                                         //
// * UserProfile                                                  //
// * Role                                                         //
// * RoutePermission(unused)                                      //
// * ComponentPermission(unused)                                  //
// * EndpointPermission(unused)                                   //
// * Permission                                                   //
// * VerificationCode                                             //
// * AccessToken                                                  //
// * RefreshToken                                                 //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Organization {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  roles     OrganizationRole[]
  users     User[]

  @@schema("microservice/account")
}

model OrganizationRole {
  // A role is a subgroup of a user group with some specified permissions.
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?       @db.Uuid

  @@unique([name, organizationId])
  @@schema("microservice/account")
}

model User {
  // [1] The 'User' and 'VerificationCode' models are both used for logging in.
  // [2] The 'User' is designed for long-term use and the 'VerificationCode' is designed for short-term use.
  // [3] Actually, the 'User' model should be named 'UserPassword' and the 'VerificationCode' should be named 'UserVerificationCode'.
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status         UserStatus         @default(ACTIVE)
  email          String?            @unique
  phone          String?            @unique
  password       String? // automatic hashing
  lastLoginAt    DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  profile        UserSingleProfile?
  profiles       UserMultiProfile[]
  roles          Role[]
  organization   Organization?      @relation(fields: [organizationId], references: [id])
  organizationId String?            @db.Uuid

  @@schema("microservice/account")
}

enum UserStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/account")
}

model UserSingleProfile {
  // !!! Customize this model for your specific application.
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prefix      String?
  fullName    String?
  firstName   String?
  middleName  String?
  lastName    String?
  suffix      String?
  dateOfBirth DateTime?          @db.Date
  gender      UserProfileGender?
  emails      Json[]
  phones      Json[]
  websites    Json? // {'facebook': 'https://www.facebook.com/elonmusk', 'twitter': 'https://twitter.com/elonmusk'}
  picture     String?
  tagIds      Int[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String             @unique @db.Uuid

  @@index([userId])
  @@schema("microservice/account")
}

model UserMultiProfile {
  // !!! Customize this model for your specific application.
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prefix         String?
  fullName       String?
  firstName      String?
  middleName     String?
  lastName       String?
  suffix         String?
  dateOfBirth    DateTime?          @db.Date
  gender         UserProfileGender?
  emails         Json[]
  phones         Json[]
  websites       Json? // {'facebook': 'https://www.facebook.com/elonmusk', 'twitter': 'https://twitter.com/elonmusk'}
  picture        String?
  tagIds         Int[]
  organizationId String?            @db.Uuid
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String             @db.Uuid

  @@index([userId])
  @@schema("microservice/account")
}

enum UserProfileGender {
  Male
  Female
  Intersex

  @@schema("microservice/account")
}

model Role {
  // A role is a subgroup of a user group with some specified permissions.
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@schema("microservice/account")
}

model Permission {
  // Permission of Resource
  id                Int               @id @default(autoincrement())
  action            PermissionAction
  resource          String
  where             Json? // an object of where expression meets the Prisma syntax.
  inverted          Boolean? // indicates whether rule allows or forbids something
  reason            String? // message which explains why rule is forbidden
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("microservice/account")
}

enum PermissionAction {
  Manage
  List
  Get
  Create
  Update
  Delete

  @@schema("microservice/account")
}

enum TrustedEntityType {
  ORGANIZATION
  ROLE
  USER

  @@schema("microservice/account")
}

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  email     String?
  phone     String?
  code      String
  status    VerificationCodeStatus
  use       VerificationCodeUse
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@schema("microservice/account")
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/account")
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD

  @@schema("microservice/account")
}

model VerificationCodeEmail {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one email address.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the email message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/account")
}

model VerificationCodeSms {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/account")
}

model AccessToken {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/account")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/account")
}
