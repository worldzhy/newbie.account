// ! ------------------------------------------------------------ //
// !                [Microservice] Account models                 //
// ! ------------------------------------------------------------ //
// * Organization                                                 //
// * User                                                         //
// * Email                                                        //
// * Membership                                                   //
// * RoutePermission(unused)                                      //
// * ComponentPermission(unused)                                  //
// * EndpointPermission(unused)                                   //
// * Permission                                                   //
// * VerificationCode                                             //
// * UserAccessToken                                              //
// * UserRefreshToken                                             //
// * ApiKeyAccessToken                                            //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Organization {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  autoJoinDomain    Boolean      @default(false)
  forceTwoFactor    Boolean      @default(false)
  ipRestrictions    String?
  onlyAllowDomain   Boolean      @default(false)
  profilePictureUrl String?
  attributes        Json?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  apiKeys           ApiKey[]
  auditLogs         AuditLog[]
  memberships       Membership[]

  @@schema("microservice/account")
}

model User {
  // [1] The 'User' and 'VerificationCode' models are both used for logging in.
  // [2] The 'User' is designed for long-term use and the 'VerificationCode' is designed for short-term use.
  // [3] Actually, the 'User' model should be named 'UserPassword' and the 'VerificationCode' should be named 'UserVerificationCode'.
  id                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checkLocationOnLogin Boolean          @default(false)
  status               UserStatus       @default(ACTIVE)
  username             String?          @unique
  email                String?          @unique
  phone                String?          @unique
  password             String? // automatic hashing
  roles                UserRole[]       @default([USER])
  name                 String?
  firstName            String?
  middleName           String?
  lastName             String?
  prefix               String?
  suffix               String?
  dateOfBirth          DateTime?        @db.Date
  gender               UserGender?
  profilePictureUrl    String?
  timezone             String           @default("America/Los_Angeles")
  twoFactorMethod      MfaMethod        @default(NONE)
  twoFactorPhone       String?
  twoFactorSecret      String?
  lastLoginAt          DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  apiKeys              ApiKey[]
  approvedSubnets      ApprovedSubnet[]
  auditLogs            AuditLog[]
  emails               Email[]
  memberships          Membership[]
  sessions             Session[]

  @@schema("microservice/account")
}

model Email {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid

  @@index([userId])
  @@schema("microservice/account")
}

model Membership {
  id             Int            @id @default(autoincrement())
  role           MembershipRole @default(MEMBER)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String         @db.Uuid
  user           User           @relation(fields: [userId], references: [id])
  userId         String         @db.Uuid

  @@index([organizationId])
  @@index([userId])
  @@schema("microservice/account")
}

model Permission {
  // Permission of Resource
  id                  Int              @id @default(autoincrement())
  action              PermissionAction
  resource            String
  where               Json? // an object of where expression meets the Prisma syntax.
  inverted            Boolean? // indicates whether rule allows or forbids something
  reason              String? // message which explains why rule is forbidden
  trustedUserId       String?          @db.Uuid
  trustedUserRole     UserRole?
  trustedMembershipId Int?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@schema("microservice/account")
}

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  email     String?
  phone     String?
  code      String
  status    VerificationCodeStatus
  use       VerificationCodeUse
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@schema("microservice/account")
}

model VerificationCodeEmail {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one email address.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the email message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/account")
}

model VerificationCodeSms {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/account")
}

model Session {
  id              Int      @id @default(autoincrement())
  accessToken     String   @unique
  refreshToken    String   @unique
  ipAddress       String
  userAgent       String?
  city            String?
  region          String?
  timezone        String?
  countryCode     String?
  browser         String?
  operatingSystem String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @db.Uuid

  @@index([accessToken])
  @@index([refreshToken])
  @@index([userId])
  @@schema("microservice/account")
}

model ApiKeyAccessToken {
  id        Int      @id @default(autoincrement())
  apiKey    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/account")
}

model ApprovedSubnet {
  id          Int      @id @default(autoincrement())
  subnet      String
  city        String?
  region      String?
  timezone    String?
  countryCode String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid

  @@index([userId])
  @@schema("microservice/account")
}

model AuditLog {
  id              Int           @id @default(autoincrement())
  event           String
  rawEvent        String
  ipAddress       String?
  userAgent       String?
  city            String?
  region          String?
  timezone        String?
  countryCode     String?
  browser         String?
  operatingSystem String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?       @db.Uuid
  organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  String?       @db.Uuid
  ApiKey          ApiKey?       @relation(fields: [apiKeyId], references: [id])
  apiKeyId        Int?

  @@index([userId])
  @@index([organizationId])
  @@schema("microservice/account")
}

model ApiKey {
  id                   Int           @id @default(autoincrement())
  key                  String        @unique
  secret               String
  description          String?
  ipRestrictions       Json?
  referrerRestrictions Json?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  auditLogs            AuditLog[]
  organization         Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String?       @db.Uuid
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String        @db.Uuid

  @@index([organizationId])
  @@index([userId])
  @@schema("microservice/account")
}

enum UserStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/account")
}

enum UserRole {
  SUDO
  USER

  @@schema("microservice/account")
}

enum UserGender {
  MALE
  FEMALE
  NONBINARY
  UNKNOWN

  @@schema("microservice/account")
}

enum MfaMethod {
  NONE
  SMS
  TOTP
  EMAIL

  @@schema("microservice/account")
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER

  @@schema("microservice/account")
}

enum PermissionAction {
  Manage
  List
  Get
  Create
  Update
  Delete

  @@schema("microservice/account")
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/account")
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD

  @@schema("microservice/account")
}
